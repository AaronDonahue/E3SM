%!PS-Adobe-3.0
%%Title: CCSM_GCAM_interface.cpp
%%Creator: ps-print v7.3.5
%%For: Tim Shippert
%%CreationDate: 15:12:23 Aug 09 2017
%%Orientation: Portrait
%%DocumentNeededResources: font Times-Roman Times-Italic
%%+ font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%DocumentSuppliedResources: procset PSPrintUserDefinedPrologue-shippert 0 0
%%DocumentMedia: Letter 612 792 0 () ()
%%PageOrder: Ascend
%%Pages: (atend)
%%Requirements:
%%EndComments
%%BeginDefaults
%%PageMedia: Letter
%%EndDefaults

%%BeginProlog

/languagelevel where{pop}{/languagelevel 1 def}ifelse
/ErrorMessage  1 def

% === BEGIN ps-print prologue 0
% version: 6.0

% Copyright (C) 2000-2014 Free Software Foundation, Inc.

% This file is part of GNU Emacs.

% GNU Emacs is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.

% GNU Emacs is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.

% You should have received a copy of the GNU General Public License
% along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

% As a special exception, the copyright holders of this module give
% you permission to include the module in a Postscript file generated
% by Emacs or other free software together with the result of
% converting text to be printed, regardless of the license terms of
% that text, and to use under terms of your choice the page images
% resulting from formatting said combination.  If you modify this
% module, you may extend this exception to your version of the module
% but you are not obligated to do so.  If you do not wish to do so,
% delete this exception statement from your version.


%%BeginProcSet: ErrorHandler
% Downloaded Error Break-page handler
% Adapted from:
%     PostScript Language Program Design,
%     Adobe Systems Incorporated.
%     Appendix A, pages 217-219

/ps$brkpage where{pop}
{
 /ps$brkpage 64 dict def
 ps$brkpage begin
  /tx 0 def/ty 0 def/toy 0 def/tox 0 def
  /prnt{
   dup type/stringtype ne{=string cvs}if
   dup length 6 mul
   /tx exch def/ty 10 def
   currentpoint/toy exch def/tox exch def
   1 setgray newpath
   tox toy 2 sub moveto
   0 ty rlineto tx 0 rlineto
   0 ty neg rlineto
   closepath fill
   tox toy moveto 0 setgray show
  }bind def
  /nl{currentpoint exch pop lmargin exch moveto 0 -10 rmoveto}def
  /=={/cp 0 def typeprint nl}def
  /typeprint{dup type dup currentdict exch known{exec}{unknowntype}ifelse}readonly def
  /lmargin 72 def
  /rmargin 72 def
  /tprint{
   dup length cp add rmargin gt{nl/cp 0 def}if
   dup length cp add/cp exch def
   prnt
  }readonly def
  /cvsprint{=string cvs tprint( )tprint}readonly def
  /unknowntype{exch pop cvlit(??)tprint cvsprint}readonly def
  /integertype{cvsprint}readonly def
  /realtype{cvsprint}readonly def
  /booleantype{cvsprint}readonly def
  /operatortype{(//)tprint cvsprint}readonly def
  /marktype{pop(-mark-)tprint}readonly def
  /dicttype{pop(-dictionary-)tprint}readonly def
  /nulltype{pop(-null-)tprint}readonly def
  /filetype{pop(-filestream-)tprint}readonly def
  /savetype{pop(-savelevel-)tprint}readonly def
  /fonttype{pop(-fontid-)tprint}readonly def
  /nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
  /stringtype{
   dup rcheck
   {(\()tprint tprint(\))tprint}
   {pop(-string-)tprint}ifelse}readonly def
  /arraytype{
   dup rcheck
   {dup xcheck
    {({)tprint{typeprint}forall(})tprint}
    {([)tprint{typeprint}forall(])tprint}ifelse}
   {pop(-array-)tprint}ifelse}readonly def
  /packedarraytype{
   dup rcheck
   {dup xcheck
    {({)tprint{typeprint}forall(})tprint}
    {([)tprint{typeprint}forall(])tprint}ifelse}
   {pop(-packedarray-)tprint}ifelse}readonly def
  /courier/Courier findfont 10 scalefont def
  /OLDhandleerror errordict/handleerror get def
 end %ps$brkpage

 /handleerror{
  systemdict begin $error begin ps$brkpage begin
  newerror
  {/newerror false store vmstatus pop pop 0 ne{grestoreall}if
   initgraphics
   ErrorMessage 1 and 0 ne{ % print on paper
    courier setfont lmargin 720 moveto
    (# ERROR: )prnt errorname prnt nl
    (# OFFENDING COMMAND: )prnt/command load prnt
    $error/ostack known
    {nl nl(# STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if
    $error/errorinfo known
    {nl nl(# ERRORINFO:)prnt nl nl $error/errorinfo get aload length{==}repeat}if
    systemdict/showpage get exec}if
   ErrorMessage 2 and 0 ne{ % send back to printing system
    (\%\%[ Error: )print errorname =print
    (; OffendingCommand: )print/command load =print
    $error/errorinfo known
    {(; ErrorInfo:)print $error/errorinfo get aload length{( )=print =print}repeat}if
    ( ]\%\%)= flush
    (\%\%[ Rest of job is ignored ]\%\%)= flush}if
   /newerror true store}if
  end end end
  stop
 } % handleerror
 dup 0 systemdict put % replace name by actual dict object
 dup 4 ps$brkpage put % replace name by dict object
 bind readonly

 errordict 3 1 roll put % put proc in errordict as /handleerror
}ifelse
%%EndProcSet


% operators for language level 2 only

(<<)cvn where			% << operator
{pop/BMark(<<)cvn load def}
{/BMark{mark}bind def}ifelse
(>>)cvn where			% >> operator
{pop/EMark(>>)cvn load def}
{/EMark{counttomark 2 idiv dup dict begin{def}repeat pop currentdict end}bind def}ifelse
/setpagedevice where		% setpagedevice
{pop}
{/setpagedevice{pop}bind def}ifelse
/packedarray where		% packedarray
{pop}
{/packedarray{array astore readonly}bind def}ifelse


% device dependent operators

/DefOp{
 dup where{pop pop pop}
 {exch dup where{pop}{pop/pop}ifelse load def}ifelse}def

/duplexmode/setduplexmode DefOp
/tumble/settumble DefOp

% === END ps-print prologue 0

%%BeginResource: procset PSPrintUserDefinedPrologue-shippert 0 0


%%EndResource

/LandscapeMode       false def
/UpsideDown          false def
/NumberOfColumns     1 def
/LandscapePageHeight 792.0 def
/PrintPageWidth      498.6141732283465 def
/PrintWidth   498.6141732283465 def
/PrintHeight  643.7029732283465 def
/LeftMargin   56.69291338582677 def
/RightMargin  56.69291338582677 def
/InterColumn  56.69291338582677 def
/BottomMargin 42.51968503937008 def
/TopMargin    42.51968503937008 def
/HeaderOffset 28.346456692913385 def
/HeaderPad    2.4276 def
/FooterOffset 28.346456692913385 def
/FooterPad    0 def
/FooterLines  2 def
/ShowNofN           true def
/SwitchHeader       false def
/PrintOnlyOneHeader false def
/PrintHeader        true def
/PrintHeaderFrame   true def
/HeaderFrameProperties [0.000 0.900 0.400 0.000 0.000 ]def
/PrintFooter        false def
/PrintFooterFrame   true def
/FooterFrameProperties [0.000 0.900 0.400 0.000 0.000 ]def
/LineSpacing      0 def
/ParagraphSpacing 0 def
/LineHeight       8.967500000000001 def
/LinesPerColumn   72 def
/WarnPaperSize    true def
/Zebra            false def
/PrintLineNumber  false def
/SyncLineZebra    false def
/ZebraFollow      0 def
/PrintLineStep    1 def
/PrintLineStart   1 def
/LineNumberColor  [0.000 0.000 0.000] def
/ZebraHeight      3 def
/ZebraColor       0.950 def
/BackgroundColor  [1.000 1.000 1.000] def
/UseSetpagedevice false def

/PageWidth PrintPageWidth LeftMargin add RightMargin add def

/N-Up           1 def
/N-Up-Landscape false def
/N-Up-Border    true def
/N-Up-Lines     1 def
/N-Up-Columns   1 def
/N-Up-Missing   0 def
/N-Up-Margin    28.346456692913385 def
/N-Up-Repeat    N-Up-Lines def
/N-Up-End       N-Up-Columns def
/N-Up-XColumn   PageWidth def
/N-Up-YColumn   0 def
/N-Up-XLine     N-Up-End 1 sub PageWidth mul neg def
/N-Up-YLine     LandscapePageHeight neg def
/N-Up-XStart    0 def
/N-Up-YStart    0 def

% === BEGIN ps-print prologue 1
% version: 6.1

% Copyright (C) 2000-2014 Free Software Foundation, Inc.

% This file is part of GNU Emacs.

% GNU Emacs is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.

% GNU Emacs is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.

% You should have received a copy of the GNU General Public License
% along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

% As a special exception, the copyright holders of this module give
% you permission to include the module in a Postscript file generated
% by Emacs or other free software together with the result of
% converting text to be printed, regardless of the license terms of
% that text, and to use under terms of your choice the page images
% resulting from formatting said combination.  If you modify this
% module, you may extend this exception to your version of the module
% but you are not obligated to do so.  If you do not wish to do so,
% delete this exception statement from your version.


% ISOLatin1Encoding stolen from ps_init.ps in GhostScript 2.6.1.4:
/ISOLatin1Encoding where{pop}{
% -- The ISO Latin-1 encoding vector isn't known, so define it.
% -- The first half is the same as the standard encoding,
% -- except for minus instead of hyphen at code 055.
/ISOLatin1Encoding
StandardEncoding 0 45 getinterval aload pop
    /minus
StandardEncoding 46 82 getinterval aload pop
%*** NOTE: the following are missing in the Adobe documentation,
%*** but appear in the displayed table:
%*** macron at 0225, dieresis at 0230, cedilla at 0233, space at 0240.
% 0200 (128)
    /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
    /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
    /dotlessi/grave/acute/circumflex/tilde/macron/breve/dotaccent
    /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
% 0240 (160)
    /space/exclamdown/cent/sterling
	/currency/yen/brokenbar/section
    /dieresis/copyright/ordfeminine/guillemotleft
	/logicalnot/hyphen/registered/macron
    /degree/plusminus/twosuperior/threesuperior
	/acute/mu/paragraph/periodcentered
    /cedilla/onesuperior/ordmasculine/guillemotright
	/onequarter/onehalf/threequarters/questiondown
% 0300 (192)
    /Agrave/Aacute/Acircumflex/Atilde
	/Adieresis/Aring/AE/Ccedilla
    /Egrave/Eacute/Ecircumflex/Edieresis
	/Igrave/Iacute/Icircumflex/Idieresis
    /Eth/Ntilde/Ograve/Oacute
	/Ocircumflex/Otilde/Odieresis/multiply
    /Oslash/Ugrave/Uacute/Ucircumflex
	/Udieresis/Yacute/Thorn/germandbls
% 0340 (224)
    /agrave/aacute/acircumflex/atilde
	/adieresis/aring/ae/ccedilla
    /egrave/eacute/ecircumflex/edieresis
	/igrave/iacute/icircumflex/idieresis
    /eth/ntilde/ograve/oacute
	/ocircumflex/otilde/odieresis/divide
    /oslash/ugrave/uacute/ucircumflex
	/udieresis/yacute/thorn/ydieresis
256 packedarray def
}ifelse

/reencodeFontISO{ %def
  dup
  length 12 add dict	% Make a new font (a new dict the same size
			% as the old one) with room for our new symbols.

  begin			% Make the new font the current dictionary.

    % Copy each of the symbols from the old dictionary
    % to the new one except for the font ID.
    {1 index/FID ne{def}{pop pop}ifelse}forall

    % Override the encoding with the ISOLatin1 encoding.
    currentdict/FontType get 0 ne{/Encoding ISOLatin1Encoding def}if

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.

%          ^    (x2 y2)
%          |       |
%          |       v
%          |  +----+ - -
%          |  |    |   ^
%          |  |    |   | Ascent (usually > 0)
%          |  |    |   |
% (0 0) -> +--+----+-------->
%             |    |   |
%             |    |   v Descent (usually < 0)
% (x1 y1) --> +----+ - -

    currentdict/FontType get 0 ne
    {/FontBBox load aload pop			% -- x1 y1 x2 y2
     FontMatrix transform/Ascent  exch def pop
     FontMatrix transform/Descent exch def pop}
    {/PrimaryFont FDepVector 0 get def
     PrimaryFont/FontBBox get aload pop
     PrimaryFont/FontMatrix get transform/Ascent exch def pop
     PrimaryFont/FontMatrix get transform/Descent exch def pop}ifelse

    /FontHeight Ascent Descent sub def	% use `sub' because descent < 0

    % Define these in case they're not in the FontInfo
    % (also, here they're easier to get to).
    /UnderlinePosition  Descent 0.70 mul def
    /OverlinePosition   Descent UnderlinePosition sub Ascent add def
    /StrikeoutPosition  Ascent 0.30 mul def
    /LineThickness      FontHeight 0.05 mul def
    /Xshadow            FontHeight  0.08 mul def
    /Yshadow            FontHeight -0.09 mul def
    /SpaceBackground    Descent neg UnderlinePosition add def
    /XBox               Descent neg def
    /YBox               LineThickness 0.7 mul def

    currentdict		% Leave the new font on the stack
    end			% Stop using the font as the current dictionary.
    definefont		% Put the font into the font dictionary
    pop			% Discard the returned font.
}bind def

% Font definition
/DefFont{findfont exch scalefont reencodeFontISO}def

% Font selection
/F{
  findfont
  dup/Ascent            get/Ascent            exch def
  dup/Descent           get/Descent           exch def
  dup/FontHeight        get/FontHeight        exch def
  dup/UnderlinePosition get/UnderlinePosition exch def
  dup/OverlinePosition  get/OverlinePosition  exch def
  dup/StrikeoutPosition get/StrikeoutPosition exch def
  dup/LineThickness     get/LineThickness     exch def
  dup/Xshadow           get/Xshadow           exch def
  dup/Yshadow           get/Yshadow           exch def
  dup/SpaceBackground   get/SpaceBackground   exch def
  dup/XBox              get/XBox              exch def
  dup/YBox              get/YBox              exch def
  setfont
}def

/FG/setrgbcolor load def

/bg false def
/BG{
  dup/bg exch def
  {[4 1 roll]}
  {[1.0 1.0 1.0]}
  ifelse
  /bgcolor exch def
}def

%  B    width    C
%   +-----------+
%               | Ascent  (usually > 0)
% A +           +
%               | Descent (usually < 0)
%   +-----------+
%  E    width    D

/dobackground{				% width --
  currentpoint				% -- width x y
  gsave
    newpath
    moveto				% A (x y)
    0 Ascent rmoveto			% B
    dup 0 rlineto			% C
    0 Descent Ascent sub rlineto	% D
    neg 0 rlineto			% E
    closepath
    FillBgColor
  grestore
}def

/eolbg{					% dobackground until right margin
  PrintWidth				% -- x-eol
  currentpoint pop			% -- cur-x
  sub					% -- width until eol
  dobackground
}def

/LineHS LineHeight LineSpacing add def
/ParagraphHS LineHeight ParagraphSpacing add def
/PSL{/h exch def bg{eolbg}if  0  currentpoint exch pop h sub  moveto}def
/PLN{PrintLineNumber{doLineNumber}if}def

/SL{LineHS PSL isLineStep pop}def	% Soft Linefeed

/PHL{ParagraphHS PSL PLN}def		% Paragraph Hard Linefeed
/LHL{LineHS PSL PLN}def			% Hard Linefeed

% Some debug
/dcp{currentpoint exch 40 string cvs print(, )print =}def
/dp{print 2 copy  exch 40 string cvs print(, )print =}def

/W{
  ( )stringwidth	% Get the width of a space in the current font.
  pop			% Discard the Y component.
  mul			% Multiply the width of a space
			% by the number of spaces to plot
  bg{dup dobackground}if
  0 rmoveto
}def

/Effect          0 def
/EffectUnderline false def
/EffectStrikeout false def
/EffectOverline  false def
/EffectShadow    false def
/EffectBox       false def
/EffectOutline   false def

% effect: 1  - underline  2   - strikeout  4  - overline
%         8  - shadow     16  - box        32 - outline
/EF{
  /Effect exch def
  /EffectUnderline Effect 1  and 0 ne def
  /EffectStrikeout Effect 2  and 0 ne def
  /EffectOverline  Effect 4  and 0 ne def
  /EffectShadow    Effect 8  and 0 ne def
  /EffectBox       Effect 16 and 0 ne def
  /EffectOutline   Effect 32 and 0 ne def
}def

% stack:  string  |-  --
/S{
  /xx currentpoint dup Descent add/yy exch def
  Ascent add/YY exch def def
  dup stringwidth pop xx add/XX exch def
  EffectShadow{
    /yy yy Yshadow add def
    /XX XX Xshadow add def
  }if
  bg{
    true
    EffectBox
      {SpaceBackground doBox}
      {xx yy XX YY doRect}
    ifelse
  }if						% background
  EffectBox      {false 0 doBox}if		% box
  EffectShadow   {dup doShadow}if		% shadow
  EffectOutline
    {true doOutline}				% outline
    {show}					% normal text
  ifelse
  EffectUnderline{UnderlinePosition Hline}if	% underline
  EffectStrikeout{StrikeoutPosition Hline}if	% strikeout
  EffectOverline {OverlinePosition  Hline}if	% overline
}bind def

% stack:  position  |-  --
/Hline{
  currentpoint exch pop add dup
  gsave
  newpath
  xx exch moveto
  XX exch lineto
  closepath
  LineThickness setlinewidth stroke
  grestore
}bind def

% stack:  fill-or-not delta  |-  --
/doBox{
  /dd exch def
  xx XBox sub dd sub yy YBox sub dd sub
  XX XBox add dd add YY YBox add dd add
  doRect
}bind def

% stack:  fill-or-not lower-x lower-y upper-x upper-y  |-  --
/doRect{
  /rYY exch def
  /rXX exch def
  /ryy exch def
  /rxx exch def
  gsave
  newpath
  rXX rYY moveto
  rxx rYY lineto
  rxx ryy lineto
  rXX ryy lineto
  closepath
  % top of stack: fill-or-not
  {FillBgColor}
  {LineThickness setlinewidth stroke}ifelse
  grestore
}bind def

% stack:  string  |-  --
/doShadow{
  gsave
  Xshadow Yshadow rmoveto
  false doOutline
  grestore
}bind def

/st 1 string def

% stack:  string fill-or-not  |-  --
/doOutline{
  /-fillp- exch def
  /-ox- currentpoint/-oy- exch def def
  gsave
  LineThickness setlinewidth
  {st 0 3 -1 roll put
   st dup true charpath
   -fillp- {gsave FillBgColor grestore}if
   stroke stringwidth
   -oy- add/-oy- exch def
   -ox- add/-ox- exch def
   -ox- -oy- moveto
  }forall
  grestore
  -ox- -oy- moveto
}bind def

% stack:  --
/FillBgColor{bgcolor aload pop setrgbcolor fill}bind def

% stack:  -- |- boolean
/isLineStep{
  SyncLineZebra
  {PLScounter 0 gt						% or zebra
   {/PLScounter PLScounter 1 sub def PLScounter 0 eq}
   {false}ifelse
   PrintLineStep 1 gt
   {/PrintLineStep PrintLineStep 1 sub def}
   {/PrintLineStep ZebraHeight def
    /PLScounter PrintLineStart def}ifelse}
  {LineNumber PrintLineStart sub PrintLineStep mod 0 eq}ifelse	% or line step
}def

% stack:  --
/doLineNumber{
  /LineNumber where
  {pop
   isLineStep			% or line step
   LineNumber Lines ge or	% or last line
   {currentfont
    gsave
    LineNumberColor SetColor
    /L0 findfont setfont
    LineNumber Lines ge
    {(end      )}
    {LineNumber 6 string cvs(      )strcat}ifelse
    dup stringwidth pop neg 0 rmoveto
    show
    grestore
    setfont}if
    /LineNumber LineNumber 1 add def
  }if
}def

% stack: color-specifier |- --
/SetColor{dup type/realtype eq{setgray}{aload pop setrgbcolor}ifelse}def

% stack: --
/printZebra{
  gsave
  ZebraColor SetColor
  /double-zebra ZebraHeight ZebraHeight add def
  /yiter double-zebra LineHS mul neg def
  /xiter PrintWidth InterColumn add def
  /zebra-line LinesPrinted def
  NumberOfColumns{LinesPerColumn doColumnZebra xiter 0 rmoveto}repeat
  grestore
}def

% stack:  lines-per-column |- --
/doColumnZebra{
  /lpc exch def
  gsave
  ZebraFollow 1 and 0 ne{
    /H ZebraHeight zebra-line ZebraHeight mod sub def
    /lpc lpc H sub def
    zebra-line double-zebra mod ZebraHeight lt
    {H doZebra	% "black" stripe followed by a "white" stripe
     /lpc lpc ZebraHeight sub def
     H ZebraHeight add}
    {H}ifelse	% "white" stripe
    LineHS mul neg 0 exch rmoveto
    /zebra-line zebra-line LinesPerColumn add def
  }if
  /zspacing 0 def
  lpc dup double-zebra idiv{ZebraHeight doZebra 0 yiter rmoveto}repeat
  double-zebra mod dup 0 le{pop}
  {dup ZebraHeight gt
   {pop ZebraHeight}
   {/zspacing LineSpacing def
    ZebraFollow 2 and 0 ne{pop ZebraHeight}if}ifelse
   doZebra}ifelse
  grestore
}def

% stack:  zebra-height (in lines) |- --
/doZebra{
  /zh exch 0.05 sub LineHS mul zspacing sub def
  gsave
  0 LineHeight 0.65 mul rmoveto
  PrintWidth 0 rlineto
  0 zh neg rlineto
  PrintWidth neg 0 rlineto
  0 zh rlineto
  fill
  grestore
}def

% stack: --
/printBackground{
  /BackgroundColor where{
    /LHg LineHeight 0.65 mul def
    /PHg PrintHeight LHg add def
    pop gsave BackgroundColor SetColor
    NumberOfColumns{
     gsave
     0 LHg rmoveto
     PrintWidth 0 rlineto
     0 PHg neg rlineto
     PrintWidth neg 0 rlineto
     0 PHg rlineto
     fill
     grestore
     PrintWidth InterColumn add 0 rmoveto
    }repeat
    grestore
  }if
}def

% tx ty rotation xscale yscale xpos ypos BeginBackImage
/BeginBackImage{
  /-save-image- save def
  /showpage{}def
  translate
  scale
  rotate
  translate
}def

/EndBackImage{-save-image- restore}def

% string fontsize fontname rotation gray xpos ypos ShowBackText
/ShowBackText{
  gsave
  translate
  setgray
  rotate
  findfont exch dup/-offset- exch -0.25 mul def scalefont setfont
  0 -offset- moveto
  /-saveLineThickness- LineThickness def
  /LineThickness 1 def
  false doOutline
  /LineThickness -saveLineThickness- def
  grestore
}def

/SetPageSize{
  BMark/PageSize[PageWidth LandscapePageHeight LandscapeMode{exch}if]EMark setpagedevice
}def

/BeginDoc{
  % ---- Remember space width of the normal text font `f0'.
  /SpaceWidth/f0 findfont setfont( )stringwidth pop def
  % ---- save the state of the document (useful for ghostscript!)
  /docState save def
  % ---- [andrewi] set PageSize based on chosen dimensions
  UseSetpagedevice{
   WarnPaperSize{SetPageSize}{mark{SetPageSize}stopped cleartomark}ifelse
  }if
  /ColumnWidth PrintWidth InterColumn add def
  % ---- define where  printing will start
  /f0 F					% this installs Ascent
  /PrintStartY PrintHeight Ascent sub def
  /ColumnIndex 1 def
  /N-Up-Counter N-Up-End 1 sub def
  /PLScounter PrintLineStart def
}def

/EndDoc{
  % ---- restore the state of the document (useful for ghostscript!)
  docState restore
}def

/BeginDSCPage{
  % ---- when 1st column, save the state of the page
  ColumnIndex 1 eq{/pageState save def}if
  % ---- save the state of the column
  /columnState save def
}def

/PrintHeaderWidth PrintOnlyOneHeader{PrintPageWidth}{PrintWidth}ifelse def

/BeginPage{
  /LinesPrinted exch def
  % ---- when 1st column, print all background effects
  ColumnIndex 1 eq{
    0 PrintStartY moveto		% move to where printing will start
    printBackground
    Zebra{printZebra}if
    printGlobalBackground
    printLocalBackground
  }if
  PrintOnlyOneHeader{ColumnIndex 1 eq}{true}ifelse
  dup PrintHeader and{
    PrintHeaderFrame{HeaderFrame}if
    HeaderText
  }if
  PrintFooter and{
    PrintFooterFrame{FooterFrame}if
    FooterText
  }if
  0 PrintStartY moveto			% move to where printing will start
  /LineNumber where
  {pop
   SyncLineZebra
   {/H PageNumber 1 sub NumberOfColumns mul ColumnIndex 1 sub add
       LinesPerColumn mul ZebraHeight mod def
    /PLScounter H PrintLineStart ge{0}{PrintLineStart H sub}ifelse def
    /PrintLineStep ZebraHeight H sub def}if}if
  PLN
}def

/EndPage{bg{eolbg}if}def

/EndDSCPage{
  ColumnIndex NumberOfColumns eq{
    % ---- restore the state of the page
    pageState restore
    /ColumnIndex 1 def
    % ---- N-up printing
    N-Up 1 gt{
      N-Up-Counter 0 gt
      {% ---- Next page on same row
	/N-Up-Counter N-Up-Counter 1 sub def
	N-Up-XColumn N-Up-YColumn}
      {% ---- Next page on next line
	/N-Up-Counter N-Up-End 1 sub def
	N-Up-XLine N-Up-YLine}ifelse
      translate
    }if
  }{ % else
    % ---- restore the state of the current column
    columnState restore
    % ---- and translate to the next column
    ColumnWidth 0 translate
    /ColumnIndex ColumnIndex 1 add def
  }ifelse
}def

/TextStart{
  LeftMargin BottomMargin
  PrintFooter{
    FooterPad add
    FooterLines FooterLineHeight mul add
    FooterPad add
    FooterOffset add}if
}def

% stack: number-of-pages-per-sheet |- --
/BeginSheet{
  /sheetState save def
  /pages-per-sheet exch def

  % ---- translate to bottom-right corner of Portrait page
  LandscapeMode{
    LandscapePageHeight 0 translate
    90 rotate
  }if
  % ---- [jack] Kludge: my ghostscript window is 21x27.7 instead of 21x29.7
  /JackGhostscript where{pop 1 27.7 29.7 div scale}if
  UpsideDown{PageWidth LandscapePageHeight translate 180 rotate}if
  % ---- N-Up printing
  N-Up 1 gt{
    % ---- landscape
    N-Up-Landscape{
      PageWidth 0 translate
      90 rotate
    }if
    N-Up-Margin dup translate
    % ---- scale
    LandscapeMode{
      /HH PageWidth def
      /WW LandscapePageHeight def
    }{
      /HH LandscapePageHeight def
      /WW PageWidth def
    }ifelse
    /xx 0 def
    N-Up-Landscape{
      /ww WW WW mul N-Up-Lines HH mul div def
      /cc HH N-Up-Columns N-Up-Missing add div def
      ww cc gt{/xx WW def/WW cc ww div WW mul def/xx xx WW sub def}if
    }{
      /hh HH N-Up-Columns N-Up-Missing add div def
      /cc HH N-Up-Lines div def
      hh cc gt{/xx WW def/WW cc hh div WW mul def/xx xx WW sub def}if
    }ifelse
    WW N-Up-Margin sub N-Up-Margin sub
    N-Up-Landscape
    {N-Up-Lines div HH}
    {N-Up-Columns N-Up-Missing add div WW}ifelse
    div dup scale
    LandscapeMode{/yy 0 def}{/yy xx def/xx 0 def}ifelse
    xx N-Up-Repeat 1 sub LandscapePageHeight mul yy add translate
    % ---- go to start position in page matrix
    N-Up-XStart N-Up-Missing 0.5 mul
    LandscapeMode
    {LandscapePageHeight mul N-Up-YStart add}
    {PageWidth mul add N-Up-YStart}ifelse
    translate
  }if
  % ---- translate to lower left corner of TEXT
  TextStart translate

  % ---- N-up printing
  N-Up 1 gt N-Up-Border and pages-per-sheet 0 gt and{
    % ---- page border
    gsave
    0 setgray
    TextStart exch neg exch neg moveto
    N-Up-Repeat
    {N-Up-End
     {gsave
      PageWidth 0 rlineto
      0 LandscapePageHeight rlineto
      PageWidth neg 0 rlineto
      closepath stroke
      grestore
      /pages-per-sheet pages-per-sheet 1 sub def
      pages-per-sheet 0 le{exit}if
      N-Up-XColumn N-Up-YColumn rmoveto
     }repeat
     pages-per-sheet 0 le{exit}if
     N-Up-XLine N-Up-XColumn sub N-Up-YLine rmoveto
    }repeat
    grestore
  }if
}def

/EndSheet{
  showpage
  sheetState restore
}def

/SetHeaderLines{			% nb-lines --
  /HeaderLines exch def
  % ---- bottom up
  HeaderPad
  HeaderLines 1 sub HeaderLineHeight mul add
  HeaderTitleLineHeight add
  HeaderPad add
  /HeaderHeight exch def
}def

/SetFooterLines{			% nb-lines --
  /FooterLines exch def
  % ---- bottom up
  FooterPad
  FooterLines FooterLineHeight mul add
  FooterPad add
  /FooterHeight exch def
}def

% |---------|
% |  tm     |
% |---------|
% |  header |
% |-+-------| <-- (x y)
% |  ho     |
% |---------|
% |  text   |
% |---------|
% |  fo     |
% |---------|
% |  footer |
% |-+-------| <-- (0 0)
% |  bm     |
% |---------|

% -- |- x y
/HeaderFrameStart{0  PrintHeight HeaderOffset add}def
/FooterFrameStart{0  FooterHeight FooterOffset add neg}def

/doFramePath{
  /h exch def
  PrintHeaderWidth	0	rlineto
  0			h	rlineto
  PrintHeaderWidth neg	0	rlineto
  0			h neg	rlineto
}def

/HeaderFramePath{HeaderHeight doFramePath}def
/FooterFramePath{FooterHeight doFramePath}def

% /path-fun /start-fun vector-property doFrame
/doFrame{
  /vecFrame exch def
  /startFrame exch load def
  /pathFrame exch load def
  gsave
    vecFrame 2 get setlinewidth				% frame border width
    % ---- do the shadow of the next rectangle
    startFrame moveto
    1 -1 rmoveto
    pathFrame
    vecFrame 4 get SetColor fill			% frame shadow color
    % ---- do the next rectangle ...
    startFrame moveto
    pathFrame
    gsave vecFrame 1 get SetColor fill grestore		% frame background
    gsave vecFrame 3 get SetColor stroke grestore	% frame border color
  grestore
}def

/HeaderFrame{/HeaderFramePath /HeaderFrameStart HeaderFrameProperties doFrame}def
/FooterFrame{/FooterFramePath /FooterFrameStart FooterFrameProperties doFrame}def

/HeaderStart{
  HeaderFrameStart
  exch HeaderPad add exch	% horizontal pad
  % ---- bottom up
  HeaderPad add			% vertical   pad
  HeaderDescent sub
  HeaderLineHeight HeaderLines 1 sub mul add
}def

/FooterStart{
  FooterFrameStart
  exch FooterPad add exch	% horizontal pad
  % ---- bottom up
  FooterPad add			% vertical   pad
  FooterDescent sub
  FooterLineHeight FooterLines 1 sub mul add
}def

/HeaderClip{HeaderFrameStart moveto HeaderFramePath clip}def
/FooterClip{FooterFrameStart moveto FooterFramePath clip}def

/strcat{
  dup length 3 -1 roll dup length dup 4 -1 roll add string dup
  0 5 -1 roll putinterval
  dup 4 2 roll exch putinterval
}def

/pagenumberstring{
  PageNumber 32 string cvs
  ShowNofN{(/)strcat PageCount 32 string cvs strcat}if
}def

% lines is-right HeaderOrFooterTextLines
/HeaderOrFooterTextLines{
  /is_right exch def
  HFStart moveto
  { % ---- process the lines
   aload pop
   exch F
   gsave
    dup xcheck{exec}if
    is_right{
     dup stringwidth pop
     PrintHeaderWidth exch sub HFPad HFPad add sub 0 rmoveto
    }if
    HFColor SetColor
    show
   grestore
   0 HFLineHeight neg rmoveto
  }forall
}def

% right-lines left-lines /start lineheight pad fore-color HeaderOrFooterText
/HeaderOrFooterText{
  /HFColor exch def
  /HFPad exch def
  /HFLineHeight exch def
  /HFStart exch load def

  % -- rightLines leftLines -- at stack

  % ---- hack: `PN 1 and'  ==  `PN 2 modulo'
  % ---- if even page number and duplex, then exchange left and right
  PageNumber 1 and 0 eq SwitchHeader and{exch}if

  % ---- process the left lines
  false HeaderOrFooterTextLines

  % ---- process the right lines
  true HeaderOrFooterTextLines
}def

/HeaderText{
  gsave HeaderClip
  HeaderLinesRight HeaderLinesLeft
  /HeaderStart HeaderLineHeight HeaderPad
  HeaderFrameProperties 0 get
  HeaderOrFooterText
  grestore
}def

/FooterText{
  gsave FooterClip
  FooterLinesRight FooterLinesLeft
  /FooterStart FooterLineHeight FooterPad
  FooterFrameProperties 0 get
  HeaderOrFooterText
  grestore
}def

/ReportFontInfo{
  2 copy
  /t0 3 1 roll DefFont
  /t0 F
  /lh FontHeight def
  /sw( )stringwidth pop def
  /aw(01234567890abcdefghijklmnopqrstuvwxyz)dup length exch
  stringwidth pop exch div def
  /t1 12/Helvetica-Oblique DefFont
  /t1 F
  gsave
    (languagelevel = )show
    languagelevel 32 string cvs show
  grestore
  0 FontHeight neg rmoveto
  gsave
    (For )show
    128 string cvs show
    ( )show
    32 string cvs show
    ( point, the line height is )show
    lh 32 string cvs show
    (, the space width is )show
    sw 32 string cvs show
    (,)show
  grestore
  0 FontHeight neg rmoveto
  gsave
    (and a crude estimate of average character width is )show
    aw 32 string cvs show
    (.)show
  grestore
  0 FontHeight neg rmoveto
}def

% cm to point
/cm{72 mul 2.54 div}def

/ReportAllFontInfo{
  % key = font name   value = font dictionary
  FontDirectory{pop 10 exch ReportFontInfo}forall
}def

% 3 cm 20 cm moveto  10/Courier ReportFontInfo  showpage
% 3 cm 20 cm moveto  ReportAllFontInfo          showpage

% === END ps-print prologue 1

/printGlobalBackground{
}def
/printLocalBackground{
}def

%%EndProlog

%%BeginSetup

%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Italic
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-BoldOblique
%%IncludeResource: font Helvetica
%%IncludeResource: font Helvetica-Bold
/h0 14(Helvetica-Bold)cvn DefFont
/h1 12(Helvetica)cvn DefFont
/L0 6(Times-Italic)cvn DefFont
/H0 12(Helvetica)cvn DefFont


% ---- These lines must be kept together because...

/h0 F
/HeaderTitleLineHeight FontHeight def

/h1 F
/HeaderLineHeight FontHeight def
/HeaderDescent    Descent def

/H0 F
/FooterLineHeight FontHeight def
/FooterDescent    Descent def

% ---- ...because `F' has a side-effect on `FontHeight' and `Descent'

/f0 8.5(Courier)cvn DefFont
/f1 8.5(Courier-Bold)cvn DefFont
/f2 8.5(Courier-Oblique)cvn DefFont
/f3 8.5(Courier-BoldOblique)cvn DefFont
/SpaceWidthRatio 0.600000 def

%%BeginFeature: *ManualFeed False
BMark /ManualFeed false EMark setpagedevice
%%EndFeature

%%%% Start of Mule Section

/Latin1Encoding {	% newname fontname  |  font
    findfont dup length dict begin
	{ 1 index /FID ne { def } { pop pop } ifelse } forall
        /Encoding ISOLatin1Encoding def
	currentdict
    end
    definefont
} bind def

%% Redefine fonts for multiple charsets.
/ReDefFont {		     % fontname encoding fdepvector size  |  -
  20 dict begin
  3 index findfont {
    1 index /FID ne 2 index /UniqueID ne and {def} {pop pop} ifelse
  } forall
  /FontType 0 def
  /FMapType 3 def
  /EscChar 0 def
  % FontMatrix ::= [ size 0 0 size 0 0 ]
  /FontMatrix exch [ exch dup 0 exch 0 exch 0 0 ] def
  /FDepVector exch def
  /Encoding exch def
  currentdict
  end			% fontname dic
  definefont pop
} bind def

/EscChar 0 def

%% End of Mule Section

/F00 /Courier findfont def
/ETOP0 256 array def
0 1 255 { ETOP0 exch 0 put } for
ETOP0 0 0 put
/VTOP0 [F00] def
/ETOP1 256 array def
0 1 255 { ETOP1 exch 0 put } for
ETOP1 0 0 put
/VTOP1 [F00] def
/ETOP2 256 array def
0 1 255 { ETOP2 exch 0 put } for
ETOP2 0 0 put
/VTOP2 [F00] def
/ETOP3 256 array def
0 1 255 { ETOP3 exch 0 put } for
ETOP3 0 0 put
/VTOP3 [F00] def
/Vh0 [ VTOP1 aload pop ] def

Vh0 0 /Helvetica-Bold-latin1 /Helvetica-Bold Latin1Encoding put
/h0 ETOP1 Vh0 14.000000 ReDefFont
/Vh1 [ VTOP0 aload pop ] def

Vh1 0 /Helvetica-latin1 /Helvetica Latin1Encoding put
/h1 ETOP0 Vh1 12.000000 ReDefFont
/VH0 [ VTOP0 aload pop ] def

VH0 0 /Helvetica-latin1 /Helvetica Latin1Encoding put
/H0 ETOP0 VH0 12.000000 ReDefFont
/Vf0 [ VTOP0 aload pop ] def

Vf0 0 /Courier-latin1 /Courier Latin1Encoding put
/f0 ETOP0 Vf0 8.500000 ReDefFont
/Vf1 [ VTOP1 aload pop ] def

Vf1 0 /Courier-Bold-latin1 /Courier-Bold Latin1Encoding put
/f1 ETOP1 Vf1 8.500000 ReDefFont
/Vf2 [ VTOP2 aload pop ] def

Vf2 0 /Courier-Oblique-latin1 /Courier-Oblique Latin1Encoding put
/f2 ETOP2 Vf2 8.500000 ReDefFont
/Vf3 [ VTOP3 aload pop ] def

Vf3 0 /Courier-BoldOblique-latin1 /Courier-BoldOblique Latin1Encoding put
/f3 ETOP3 Vf3 8.500000 ReDefFont
BeginDoc
%%EndSetup

%%Page: 1 1
/Lines 516 def
/PageCount 8 def
1 BeginSheet
BeginDSCPage
/LineNumber 1 def
/PageNumber 1 def
/HeaderLinesLeft[
 [/h0 (CCSM_GCAM_interface.cpp)]
 [/h1 (~/iESM/models/lnd/clm/src/iac/giac/gcam/cvs/objects/ccsmcpl/source/)]
]def
/HeaderLinesRight[
 [/h0 /pagenumberstring load]
 [/h1 (08/09/2017)]
]def
2 SetHeaderLines
0 BeginPage
/f0 F
false BG
0.000 0.000 0.000 FG
0.000 0.000 0.804 FG
(/) S
(*) S
/f2 F
(! ) S
LHL
(* \\file CCSM_GCAM_interface.cpp) S
LHL
(* \\ingroup Objects) S
LHL
(* \\brief CCSM gcam driver source file.) S
LHL
(* \\author John Truesdale) S
LHL
(*/) S
/f0 F
0.000 0.000 0.000 FG
PHL
PHL
LHL
0.282 0.239 0.545 FG
(#) S
(include) S
0.000 0.000 0.000 FG
( ) S
0.000 0.545 0.000 FG
("util/base/include/auto_file.h") S
0.000 0.000 0.000 FG
LHL
0.282 0.239 0.545 FG
(#) S
(include) S
0.000 0.000 0.000 FG
( ) S
0.000 0.545 0.000 FG
("../../ccsmcpl/include/CCSM_GCAM_interface.h") S
0.000 0.000 0.000 FG
LHL
0.282 0.239 0.545 FG
(#) S
(include) S
0.000 0.000 0.000 FG
( ) S
0.000 0.545 0.000 FG
("containers/include/world.h") S
0.000 0.000 0.000 FG
PHL
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(o) S
(fstrea) S
(m) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(outFile) S
0.000 0.000 0.000 FG
(;) S
PHL
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(LoggerFactoryWrappe) S
(r) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(loggerFactoryWrapper) S
0.000 0.000 0.000 FG
(;) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Pointer for a scenario) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
/f3 F
1.000 0.271 0.000 FG
(S) S
(cenari) S
(o) S
/f0 F
0.000 0.000 0.000 FG
(* ) S
0.000 0.000 0.804 FG
(scenario) S
0.000 0.000 0.000 FG
(;) S
( ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(model scenario info) S
PHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
LHL
(  ) S
0.000 0.545 0.545 FG
(s) S
(td) S
0.000 0.000 0.000 FG
(::) S
/f3 F
1.000 0.271 0.000 FG
(auto_ptr) S
/f0 F
0.000 0.000 0.000 FG
(<) S
(CcsmRunner) S
(>) S
( ) S
0.000 0.000 0.804 FG
(runner) S
0.000 0.000 0.000 FG
(;) S
PHL
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(vector) S
/f0 F
0.000 0.000 0.000 FG
(<) S
/f3 F
1.000 0.271 0.000 FG
(string) S
/f0 F
0.000 0.000 0.000 FG
(>) S
( ) S
0.000 0.545 0.545 FG
(CCSM_GCAM_interface) S
0.000 0.000 0.000 FG
(::) S
0.000 0.000 0.804 FG
(regionName) S
0.000 0.000 0.000 FG
(;) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(vector) S
/f0 F
0.000 0.000 0.000 FG
(<) S
/f3 F
1.000 0.271 0.000 FG
(string) S
/f0 F
0.000 0.000 0.000 FG
(>) S
( ) S
0.000 0.545 0.545 FG
(CCSM_GCAM_interface) S
0.000 0.000 0.000 FG
(::) S
0.000 0.000 0.804 FG
(landType) S
0.000 0.000 0.000 FG
(;) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(vector) S
/f0 F
0.000 0.000 0.000 FG
(<) S
/f3 F
1.000 0.271 0.000 FG
(string) S
/f0 F
0.000 0.000 0.000 FG
(>) S
( ) S
0.000 0.545 0.545 FG
(CCSM_GCAM_interface) S
0.000 0.000 0.000 FG
(::) S
0.000 0.000 0.804 FG
(cropName) S
0.000 0.000 0.000 FG
(;) S
PHL
LHL
0.000 0.000 0.804 FG
(/) S
(*) S
/f2 F
(! \\brief Constructor) S
LHL
(* \\details This is the constructor for the CCSM_driver class.) S
LHL
(*/) S
/f0 F
0.000 0.000 0.000 FG
PHL
PHL
LHL
0.000 0.545 0.545 FG
(C) S
(CSM_GCAM_interface) S
0.000 0.000 0.000 FG
(::) S
/f3 F
0.000 0.000 0.545 FG
(CCSM_GCAM_interface) S
/f0 F
0.000 0.000 0.000 FG
(\(\){) S
LHL
(}) S
PHL
LHL
0.000 0.000 0.804 FG
(/) S
(/) S
/f2 F
(! Destructor. ) S
LHL
/f0 F
0.000 0.545 0.545 FG
(C) S
(CSM_GCAM_interface) S
0.000 0.000 0.000 FG
(:) S
(:) S
(~) S
/f3 F
0.000 0.000 0.545 FG
(CCSM_GCAM_interface) S
/f0 F
0.000 0.000 0.000 FG
(\(\){) S
LHL
(}) S
PHL
LHL
0.000 0.000 0.804 FG
(/) S
(*) S
/f2 F
(! \\brief Initializer for GCAM.) S
LHL
(* \\details) S
LHL
(*  Initialize gcam log files and read in configuration) S
LHL
(*  and base model information.  Create and setup scenario) S
LHL
(*/) S
/f0 F
0.000 0.000 0.000 FG
PHL
LHL
/f3 F
1.000 0.271 0.000 FG
(v) S
(oi) S
(d) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.545 0.545 FG
(CCSM_GCAM_interface) S
0.000 0.000 0.000 FG
(::) S
/f3 F
0.000 0.000 0.545 FG
(initGCAM) S
/f0 F
0.000 0.000 0.000 FG
(\() S
/f3 F
1.000 0.271 0.000 FG
(void) S
/f0 F
0.000 0.000 0.000 FG
(\)) S
LHL
({) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(identify default file names for control input and logging controls) S
LHL
/f0 F
0.000 0.000 0.000 FG
( ) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(strin) S
(g) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(configurationArg) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.000 FG
("configuration.xml") S
0.000 0.000 0.000 FG
(;) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(strin) S
(g) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(loggerFactoryArg) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.000 FG
("log_conf.xml") S
0.000 0.000 0.000 FG
(;) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Add OS dependent prefixes to the arguments.) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
/f1 F
0.804 0.000 0.000 FG
(c) S
(onst) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(strin) S
(g) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(configurationFileName) S
0.000 0.000 0.000 FG
( = configurationArg;) S
LHL
(  ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(strin) S
(g) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(loggerFileName) S
0.000 0.000 0.000 FG
( = loggerFactoryArg;) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Initialize the LoggerFactory) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
/f3 F
1.000 0.271 0.000 FG
(b) S
(oo) S
(l) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(success) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.545 FG
(XMLHelper) S
0.000 0.000 0.000 FG
(<) S
/f3 F
1.000 0.271 0.000 FG
(void) S
/f0 F
0.000 0.000 0.000 FG
(>) S
(::parseXML\( loggerFileName, &loggerFactoryWrapper \);) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Get the main log file.) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
/f3 F
1.000 0.271 0.000 FG
(I) S
(Logge) S
(r) S
/f0 F
0.000 0.000 0.000 FG
(& ) S
0.000 0.000 0.804 FG
(mainLog) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.545 FG
(ILogger) S
0.000 0.000 0.000 FG
(::getLogger\( ) S
0.000 0.545 0.000 FG
("main_log") S
0.000 0.000 0.000 FG
( \);) S
LHL
(  mainLog.setLevel\( ) S
0.000 0.545 0.545 FG
(ILogger) S
0.000 0.000 0.000 FG
(::WARNING \);) S
PHL
LHL
( ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(print disclaimer) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
(m) S
(ainLog << ) S
0.000 0.545 0.000 FG
("LEGAL NOTICE") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("This computer software was prepared by Battelle Memorial Institute,") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("hereinafter the Contractor, under Contract No. DE-AC05-76RL0 1830") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("with the Department of Energy \(DOE\). NEITHER THE GOVERNMENT NOR THE") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("CONTRACTOR MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("LIABILITY FOR THE USE OF THIS SOFTWARE. This notice including this") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("sentence must appear on any copies of this computer software.") S
0.000 0.000 0.000 FG
( << endl;) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(print export control notice) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
(m) S
(ainLog << ) S
0.000 0.545 0.000 FG
("EXPORT CONTROL") S
0.000 0.000 0.000 FG
( << endl;) S
EndPage
EndDSCPage
EndSheet

%%Page: 2 2
/Lines 516 def
/PageCount 8 def
1 BeginSheet
BeginDSCPage
/LineNumber 73 def
/PageNumber 2 def
/HeaderLinesLeft[
 [/h0 (CCSM_GCAM_interface.cpp)]
 [/h1 (~/iESM/models/lnd/clm/src/iac/giac/gcam/cvs/objects/ccsmcpl/source/)]
]def
/HeaderLinesRight[
 [/h0 /pagenumberstring load]
 [/h1 (08/09/2017)]
]def
2 SetHeaderLines
72 BeginPage
/f0 F
false BG
0.000 0.000 0.000 FG
(  mainLog << ) S
0.000 0.545 0.000 FG
("User agrees that the Software will not be shipped, transferred or") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("exported into any country or used in any manner prohibited by the") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("United States Export Administration Act or any other applicable") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("export laws, restrictions or regulations \(collectively the 'Export Laws'\).") S
0.000 0.000 0.000 FG
( << endl) S
SL
(;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("Export of the Software may require some form of license or other") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("authority from the U.S. Government, and failure to obtain such") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("export control license may result in criminal liability under") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("U.S. laws. In addition, if the Software is identified as export controlled") S
0.000 0.000 0.000 FG
( << endl) S
SL
(;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("items under the Export Laws, User represents and warrants that User") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("is not a citizen, or otherwise located within, an embargoed nation") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("\(including without limitation Iran, Syria, Sudan, Cuba, and North Korea\)") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("    and that User is not otherwise prohibited") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("under the Export Laws from receiving the Software.") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("Copyright 2011 Battelle Memorial Institute.  All Rights Reserved.") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("Distributed as open-source under the terms of the Educational Community ") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("License version 2.0 \(ECL 2.0\). http://www.opensource.org/licenses/ecl2.php") S
0.000 0.000 0.000 FG
( << endl) S
SL
(;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("For further details, see: http://www.globalchange.umd.edu/models/gcam/") S
0.000 0.000 0.000 FG
( << endl;) S
PHL
(  ) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("Running GCAM model code base version ") S
0.000 0.000 0.000 FG
( << __ObjECTS_VER__ << ) S
0.000 0.545 0.000 FG
(" revision ") S
0.000 0.000 0.000 FG
LHL
10 W
(<< __REVISION_NUMBER__ << endl << endl;) S
PHL
(  ) S
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Parse configuration file.) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
(m) S
(ainLog.setLevel\( ) S
0.000 0.545 0.545 FG
(ILogger) S
0.000 0.000 0.000 FG
(::NOTICE \);) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("Parsing input files...") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(Configuratio) S
(n) S
/f0 F
0.000 0.000 0.000 FG
(* ) S
0.000 0.000 0.804 FG
(conf) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.545 FG
(Configuration) S
0.000 0.000 0.000 FG
(::getInstance\(\);) S
LHL
(  success = ) S
0.000 0.545 0.545 FG
(XMLHelper) S
0.000 0.000 0.000 FG
(<) S
/f3 F
1.000 0.271 0.000 FG
(void) S
/f0 F
0.000 0.000 0.000 FG
(>) S
(::parseXML\( configurationFileName, conf \);) S
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Check if parsing succeeded. Non-zero return codes from main indicate) S
PHL
/f0 F
0.000 0.000 0.000 FG
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(Initialize the timer.  Create an object of the Timer class.) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
/f3 F
1.000 0.271 0.000 FG
(T) S
(ime) S
(r) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(timer) S
0.000 0.000 0.000 FG
(;) S
LHL
(  timer.start\(\);) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(******  packup gcamo  hard coded regions and landtypes for now) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
(r) S
(egionName.push_back\() S
0.000 0.545 0.000 FG
("USA") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Canada") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Western Europe") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Japan") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Australia_NZ") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Former Soviet Union") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("China") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Middle East") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Africa") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Latin America") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Southeast Asia") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Eastern Europe") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("Korea") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  regionName.push_back\() S
0.000 0.545 0.000 FG
("India") S
0.000 0.000 0.000 FG
(\);) S
PHL
(    ) S
PHL
(    ) S
LHL
(  landType.push_back\() S
0.000 0.545 0.000 FG
("Build-up") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  landType.push_back\() S
0.000 0.545 0.000 FG
("Cropland") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  landType.push_back\() S
0.000 0.545 0.000 FG
("Pasture") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  landType.push_back\() S
0.000 0.545 0.000 FG
("ForestHarvested") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  landType.push_back\() S
0.000 0.545 0.000 FG
("Forest") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  landType.push_back\() S
0.000 0.545 0.000 FG
("Other Land") S
0.000 0.000 0.000 FG
(\);) S
PHL
(    ) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("biomass") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Corn") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("eucalyptus") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("FiberCrop") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("FodderGrass") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("FodderHerb") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Forest") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Grassland") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Jatropha") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("miscanthus") S
0.000 0.000 0.000 FG
(\);) S
EndPage
EndDSCPage
EndSheet

%%Page: 3 3
/Lines 516 def
/PageCount 8 def
1 BeginSheet
BeginDSCPage
/LineNumber 142 def
/PageNumber 3 def
/HeaderLinesLeft[
 [/h0 (CCSM_GCAM_interface.cpp)]
 [/h1 (~/iESM/models/lnd/clm/src/iac/giac/gcam/cvs/objects/ccsmcpl/source/)]
]def
/HeaderLinesRight[
 [/h0 /pagenumberstring load]
 [/h1 (08/09/2017)]
]def
2 SetHeaderLines
144 BeginPage
/f0 F
false BG
0.000 0.000 0.000 FG
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("MiscCrop") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("OilCrop") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("OtherArableLand") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("OtherGrain") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("PalmFruit") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Pasture") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Rice") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("RockIceDesert") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Root_Tuber") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Shrubland") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("SugarCrop") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Tundra") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("UnmanagedForest") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("UnmanagedPasture") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("UrbanLand") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("Wheat") S
0.000 0.000 0.000 FG
(\);) S
LHL
(  cropName.push_back\() S
0.000 0.545 0.000 FG
("willow") S
0.000 0.000 0.000 FG
(\);) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Create an empty exclusion list so that any type of IScenarioRunner can be) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(created.) S
PHL
/f0 F
0.000 0.000 0.000 FG
LHL
(  ) S
0.000 0.000 0.804 FG
(//  ) S
/f2 F
(create the scenario runner) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
(r) S
(unner = ) S
/f3 F
1.000 0.271 0.000 FG
(auto_ptr) S
/f0 F
0.000 0.000 0.000 FG
(<) S
(CcsmRunner) S
(>) S
(\( ) S
/f1 F
0.804 0.000 0.000 FG
(new) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(CcsmRunner) S
/f0 F
0.000 0.000 0.000 FG
( \);) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Setup the scenario.) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
(s) S
(uccess = runner->setupScenarios\( timer \);) S
PHL
LHL
(  ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(Modeltim) S
(e) S
/f0 F
0.000 0.000 0.000 FG
(* ) S
0.000 0.000 0.804 FG
(modeltime) S
0.000 0.000 0.000 FG
( = runner->getInternalScenario\(\)->getModeltime\(\);) S
PHL
LHL
(  gcamStartYear = modeltime->getStartYear\(\);) S
LHL
(  gcamEndYear = modeltime->getEndYear\(\);) S
PHL
LHL
(  timer.stop\(\);) S
PHL
LHL
(}) S
LHL
/f3 F
1.000 0.271 0.000 FG
(voi) S
(d) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.545 0.545 FG
(CCSM_GCAM_interface) S
0.000 0.000 0.000 FG
(::) S
/f3 F
0.000 0.000 0.545 FG
(setDensityGCAM) S
/f0 F
0.000 0.000 0.000 FG
(\() S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(yyyymmdd) S
0.000 0.000 0.000 FG
(,) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(tod) S
0.000 0.000 0.000 FG
(,) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(double) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcami) S
0.000 0.000 0.000 FG
(,) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcami_fdim1) S
SL
(_nflds) S
0.000 0.000 0.000 FG
(,) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcami_fdim2_datasize) S
0.000 0.000 0.000 FG
(\)) S
LHL
({) S
PHL
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(boo) S
(l) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(success) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.545 FG
(false) S
0.000 0.000 0.000 FG
(;) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(ILogge) S
(r) S
/f0 F
0.000 0.000 0.000 FG
(& ) S
0.000 0.000 0.804 FG
(mainLog) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.545 FG
(ILogger) S
0.000 0.000 0.000 FG
(::getLogger\( ) S
0.000 0.545 0.000 FG
("main_log") S
0.000 0.000 0.000 FG
( \);) S
LHL
(  mainLog.setLevel\( ) S
0.000 0.545 0.545 FG
(ILogger) S
0.000 0.000 0.000 FG
(::NOTICE \);) S
PHL
(  ) S
LHL
(  ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(*yyyymmdd/10000 < gcamStartYear \) {) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("returning from setDensityGCAM: current date: ") S
0.000 0.000 0.000 FG
( <<*yyyymmdd<<) S
0.000 0.545 0.000 FG
(" is before GCAM star) S
SL
(ting date: ") S
0.000 0.000 0.000 FG
( << gcamStartYear << endl;) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(return) S
/f0 F
0.000 0.000 0.000 FG
(;) S
LHL
(  }) S
LHL
(  ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(*yyyymmdd/10000 > gcamEndYear \) {) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("returning from setDensityGCAM: current date: ") S
0.000 0.000 0.000 FG
( <<*yyyymmdd<<) S
0.000 0.545 0.000 FG
(" is after GCAM endin) S
SL
(g date: ") S
0.000 0.000 0.000 FG
( << gcamEndYear << endl;) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(return) S
/f0 F
0.000 0.000 0.000 FG
(;) S
LHL
(  }) S
PHL
(  ) S
LHL
(  ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(Modeltim) S
(e) S
/f0 F
0.000 0.000 0.000 FG
(* ) S
0.000 0.000 0.804 FG
(modeltime) S
0.000 0.000 0.000 FG
( = runner->getInternalScenario\(\)->getModeltime\(\);) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(curryear) S
0.000 0.000 0.000 FG
( = *yyyymmdd/10000;) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(finalCalibrationYear) S
0.000 0.000 0.000 FG
(=modeltime->getper_to_yr\(modeltime->getFinalCalibrationPeriod\(\)\);) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(period) S
0.000 0.000 0.000 FG
( = modeltime->getyr_to_per\( curryear \);) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(modelyear) S
0.000 0.000 0.000 FG
(= modeltime->getper_to_yr\(period\);) S
PHL
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("curryear is ") S
0.000 0.000 0.000 FG
( << curryear << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("period is ") S
0.000 0.000 0.000 FG
( << period << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("modelyear is ") S
0.000 0.000 0.000 FG
( << modelyear << endl;) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("finalCalibrationYear is ") S
0.000 0.000 0.000 FG
( << finalCalibrationYear << endl;) S
PHL
LHL
(  ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(if we are past final calibration year then push carbon densities for this year) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(curryear > finalCalibrationYear\) {) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("GCAM is setting Carbon data for year") S
0.000 0.000 0.000 FG
( << curryear << endl;) S
PHL
(    ) S
LHL
(    ) S
0.000 0.000 0.804 FG
(/) S
(/) S
/f2 F
(unpack gcami and set above and below ground carbon fields) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
/f3 F
1.000 0.271 0.000 FG
(S) S
(etCarbonDensit) S
(y) S
/f0 F
0.000 0.000 0.000 FG
(& ) S
0.000 0.000 0.804 FG
(setDensities) S
0.000 0.000 0.000 FG
( = runner->getInternalScenario\(\)->getWorld\(\)->getAdjustCarbonDe) S
SL
(nsityVisitor\(\);) S
EndPage
EndDSCPage
EndSheet

%%Page: 4 4
/Lines 516 def
/PageCount 8 def
1 BeginSheet
BeginDSCPage
/LineNumber 210 def
/PageNumber 4 def
/HeaderLinesLeft[
 [/h0 (CCSM_GCAM_interface.cpp)]
 [/h1 (~/iESM/models/lnd/clm/src/iac/giac/gcam/cvs/objects/ccsmcpl/source/)]
]def
/HeaderLinesRight[
 [/h0 /pagenumberstring load]
 [/h1 (08/09/2017)]
]def
2 SetHeaderLines
216 BeginPage
/f0 F
false BG
0.000 0.000 0.000 FG
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(gcami_nflds) S
0.000 0.000 0.000 FG
(=2;) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(nreg) S
0.000 0.000 0.000 FG
( = 14;) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(naez) S
0.000 0.000 0.000 FG
( = 18;) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(ncrops) S
0.000 0.000 0.000 FG
( = 27;) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(i) S
0.000 0.000 0.000 FG
(=-1*gcami_nflds;) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(r) S
0.000 0.000 0.000 FG
(=0;r<nreg;r++\){) S
LHL
(      ) S
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(aez) S
0.000 0.000 0.000 FG
(=1;aez<=naez;aez++\){) S
LHL
8 W
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(ic) S
0.000 0.000 0.000 FG
(=0;ic<ncrops;ic++\){) S
LHL
12 W
(mainLog << ) S
0.000 0.545 0.000 FG
("inside for loop r=") S
0.000 0.000 0.000 FG
(<<r<<) S
0.000 0.545 0.000 FG
(" aez= ") S
0.000 0.000 0.000 FG
(<<aez<<) S
0.000 0.545 0.000 FG
(" crop ") S
0.000 0.000 0.000 FG
(<<ic<<endl;) S
LHL
10 W
(i+=gcami_nflds;) S
LHL
10 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(gcami[i] > 0.\) {) S
LHL
12 W
(setDensities.setCarbonDensityToPush\( regionName[r], aez, cropName[ic], gcami[i], gcam) S
SL
(i[i+1],  curryear \);) S
LHL
12 W
(mainLog << ) S
0.000 0.545 0.000 FG
("Setting above/below ground carbon for region ") S
0.000 0.000 0.000 FG
(<<r<<) S
0.000 0.545 0.000 FG
(" aez ") S
0.000 0.000 0.000 FG
(<<aez<<) S
0.000 0.545 0.000 FG
(" crop ") S
0.000 0.000 0.000 FG
SL
(<<ic<<) S
0.000 0.545 0.000 FG
(" year ") S
0.000 0.000 0.000 FG
(<<curryear<<) S
0.000 0.545 0.000 FG
("agc=") S
0.000 0.000 0.000 FG
(<<gcami[i]<<) S
0.000 0.545 0.000 FG
("bgc=") S
0.000 0.000 0.000 FG
(<<gcami[i+1] << endl;) S
LHL
10 W
(}) S
LHL
8 W
(}) S
LHL
(      }) S
LHL
(    }) S
LHL
12 W
(mainLog << ) S
0.000 0.545 0.000 FG
("pushing carbon into the model") S
0.000 0.000 0.000 FG
( << endl;) S
PHL
LHL
(    ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(push set carbon densities into the model) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
(r) S
(unner->getInternalScenario\(\)->accept\( &setDensities, period \);) S
PHL
LHL
(    ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(for now just write a restart dataset every step) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
0.000 0.000 0.804 FG
(//    ) S
/f2 F
(runner->writeRestart\( period, curryear \);) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
/f1 F
0.804 0.000 0.000 FG
(return) S
/f0 F
0.000 0.000 0.000 FG
(;) S
LHL
(  }) S
LHL
(}) S
LHL
/f3 F
1.000 0.271 0.000 FG
(voi) S
(d) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.545 0.545 FG
(CCSM_GCAM_interface) S
0.000 0.000 0.000 FG
(::) S
/f3 F
0.000 0.000 0.545 FG
(runGCAM) S
/f0 F
0.000 0.000 0.000 FG
(\() S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(yyyymmdd) S
0.000 0.000 0.000 FG
(,) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(tod) S
0.000 0.000 0.000 FG
(,) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(double) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcami) S
0.000 0.000 0.000 FG
(,) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcami_fdim1_nflds) S
0.000 0.000 0.000 FG
(,) S
SL
( ) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcami_fdim2_datasize) S
0.000 0.000 0.000 FG
(,) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(double) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcamo) S
0.000 0.000 0.000 FG
(,) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcamo_fdim1_nflds) S
0.000 0.000 0.000 FG
(,) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcamo_fdim2_datasize) S
0.000 0.000 0.000 FG
(,) S
( ) S
/f3 F
1.000 0.271 0.000 FG
(doubl) S
SL
(e) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcamoemis) S
0.000 0.000 0.000 FG
(,) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcamoemis_fdim1_nflds) S
0.000 0.000 0.000 FG
(,) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(gcamoemis_fdim2_datasize) S
0.000 0.000 0.000 FG
(,) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(yr1) S
0.000 0.000 0.000 FG
(,) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(yr2) S
0.000 0.000 0.000 FG
(,) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(snea) S
SL
(kermode) S
0.000 0.000 0.000 FG
(,) S
/f3 F
1.000 0.271 0.000 FG
(int) S
/f0 F
0.000 0.000 0.000 FG
( *) S
0.000 0.000 0.804 FG
(write_rest) S
0.000 0.000 0.000 FG
(\)) S
LHL
({) S
PHL
(  ) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(curryear) S
0.000 0.000 0.000 FG
( = *yyyymmdd/10000;) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(boo) S
(l) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(success) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.545 FG
(false) S
0.000 0.000 0.000 FG
(;) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(ILogge) S
(r) S
/f0 F
0.000 0.000 0.000 FG
(& ) S
0.000 0.000 0.804 FG
(mainLog) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.545 FG
(ILogger) S
0.000 0.000 0.000 FG
(::getLogger\( ) S
0.000 0.545 0.000 FG
("main_log") S
0.000 0.000 0.000 FG
( \);) S
LHL
(  mainLog.setLevel\( ) S
0.000 0.545 0.545 FG
(ILogger) S
0.000 0.000 0.000 FG
(::NOTICE \);) S
PHL
(  ) S
LHL
(  ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(curryear < gcamStartYear \) {) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("returning from runGCAM: current date: ") S
0.000 0.000 0.000 FG
( <<*yyyymmdd<<) S
0.000 0.545 0.000 FG
(" is before GCAM starting da) S
SL
(te: ") S
0.000 0.000 0.000 FG
( << gcamStartYear << endl;) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(return) S
/f0 F
0.000 0.000 0.000 FG
(;) S
LHL
(  }) S
LHL
(  ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(curryear > 2104 \) {) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("returning from runGCAM: current date: ") S
0.000 0.000 0.000 FG
( <<*yyyymmdd<<) S
0.000 0.545 0.000 FG
(" is after GCAM ending date:) S
SL
( ") S
0.000 0.000 0.000 FG
( << gcamEndYear << endl;) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(return) S
/f0 F
0.000 0.000 0.000 FG
(;) S
LHL
(  }) S
PHL
(  ) S
LHL
(  ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(Extrapolate GCAM data for year 2100 fill gcamo gcamoemis) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(curryear >= 2096 \) {) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(Modeltim) S
(e) S
/f0 F
0.000 0.000 0.000 FG
(* ) S
0.000 0.000 0.804 FG
(modeltime) S
0.000 0.000 0.000 FG
( = runner->getInternalScenario\(\)->getModeltime\(\);) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(period2095) S
0.000 0.000 0.000 FG
( = modeltime->getyr_to_per\( 2095 \);) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(period2090) S
0.000 0.000 0.000 FG
( = modeltime->getyr_to_per\( 2090 \);) S
PHL
(    ) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("curryear is ") S
0.000 0.000 0.000 FG
( << curryear << endl;) S
PHL
(    ) S
LHL
(    ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(calculate bounding years to pass to gcam2glm) S
PHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(d) S
(oubl) S
(e) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(tmp) S
0.000 0.000 0.000 FG
(=0.;) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(doubl) S
(e) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(tmp2090) S
0.000 0.000 0.000 FG
(=0.;) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(doubl) S
(e) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(tmp2095) S
0.000 0.000 0.000 FG
(=0.;) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(in) S
0.000 0.000 0.000 FG
( = -1;) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(gcamoyear) S
0.000 0.000 0.000 FG
([2];) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(curryear< 2100\) {) S
LHL
(      gcamoyear[0]=2090;) S
LHL
(      gcamoyear[1]=2095;) S
LHL
(    }) S
/f1 F
0.804 0.000 0.000 FG
(else) S
/f0 F
0.000 0.000 0.000 FG
({) S
LHL
(      mainLog << ) S
0.000 0.545 0.000 FG
("PAST GCAM ending year of ") S
0.000 0.000 0.000 FG
(<< gcamEndYear << endl;) S
EndPage
EndDSCPage
EndSheet

%%Page: 5 5
/Lines 516 def
/PageCount 8 def
1 BeginSheet
BeginDSCPage
/LineNumber 275 def
/PageNumber 5 def
/HeaderLinesLeft[
 [/h0 (CCSM_GCAM_interface.cpp)]
 [/h1 (~/iESM/models/lnd/clm/src/iac/giac/gcam/cvs/objects/ccsmcpl/source/)]
]def
/HeaderLinesRight[
 [/h0 /pagenumberstring load]
 [/h1 (08/09/2017)]
]def
2 SetHeaderLines
288 BeginPage
/f0 F
false BG
0.000 0.000 0.000 FG
(      mainLog << ) S
0.000 0.545 0.000 FG
("Extrapolating GCAM data to 2100 using 2090 and 2095") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(      gcamoyear[0]=2095;) S
LHL
(      gcamoyear[1]=2100;) S
LHL
(    }) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(GetGLMDat) S
(a) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(glmData2090) S
0.000 0.000 0.000 FG
(;) S
LHL
(    runner->getInternalScenario\(\)->accept\(&glmData2090, period2090 \);) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(GetGLMDat) S
(a) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(glmData2095) S
0.000 0.000 0.000 FG
(;) S
LHL
(    runner->getInternalScenario\(\)->accept\(&glmData2095, period2095 \);) S
PHL
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(yr) S
0.000 0.000 0.000 FG
( = 0;yr<2;yr++\) {) S
LHL
(      mainLog << ) S
0.000 0.545 0.000 FG
("gcamoyear[") S
0.000 0.000 0.000 FG
( << yr <<) S
0.000 0.545 0.000 FG
("]=") S
0.000 0.000 0.000 FG
( << gcamoyear[yr] << endl;) S
LHL
(      ) S
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(i) S
0.000 0.000 0.000 FG
( = 0;i<14;i++\) {) S
LHL
8 W
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(aez) S
0.000 0.000 0.000 FG
( = 1;aez<19;aez++\) {) S
LHL
10 W
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(n) S
0.000 0.000 0.000 FG
( = 0;n<*gcamo_fdim1_nflds;n++\) {) S
LHL
12 W
(in++;) S
LHL
12 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(landType[n] != ) S
0.000 0.545 0.000 FG
("ForestHarvested") S
0.000 0.000 0.000 FG
(\) { ) S
LHL
14 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(gcamoyear[yr]==2090\) {) S
LHL
16 W
(tmp =  glmData2090.getLandCover\( regionName[i], aez, landType[n], gcamoyear[yr] \)) S
SL
(;) S
6 W
LHL
14 W
(}) S
LHL
14 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(gcamoyear[yr]==2095\) {) S
LHL
16 W
(tmp =  glmData2095.getLandCover\( regionName[i], aez, landType[n], gcamoyear[yr] \)) S
SL
(;) S
6 W
LHL
14 W
(}) S
LHL
14 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(gcamoyear[yr]==2100\) {) S
LHL
16 W
(tmp2090 =  glmData2090.getLandCover\( regionName[i], aez, landType[n], 2090 \);) S
3 W
LHL
16 W
(tmp2095 =  glmData2095.getLandCover\( regionName[i], aez, landType[n], 2095 \);) S
3 W
LHL
16 W
(tmp=\(tmp2095-tmp2090\)+tmp2095;) S
LHL
(   ) S
13 W
(mainLog << ) S
0.000 0.545 0.000 FG
("values for 2090 and 2095 are") S
0.000 0.000 0.000 FG
( << tmp2090 <<) S
0.000 0.545 0.000 FG
("/") S
0.000 0.000 0.000 FG
(<< tmp2095 << endl;) S
LHL
14 W
(}) S
LHL
14 W
(gcamo[in] = tmp<0.?0.:tmp;) S
LHL
14 W
(mainLog << ) S
0.000 0.545 0.000 FG
("packing gcamo") S
0.000 0.000 0.000 FG
( << regionName[i] << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << aez << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << landType[n] <<) S
0.000 0.545 0.000 FG
(") S
SL
( gcamo[") S
0.000 0.000 0.000 FG
( << in << ) S
0.000 0.545 0.000 FG
("]=") S
0.000 0.000 0.000 FG
( << gcamo[in] << endl;) S
PHL
14 W
LHL
12 W
(}) S
/f1 F
0.804 0.000 0.000 FG
(else) S
/f0 F
0.000 0.000 0.000 FG
({) S
LHL
14 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(gcamoyear[yr]==2090\) {) S
LHL
16 W
(tmp = glmData2090.getProductionInCarbon\( regionName[i], aez, ) S
0.000 0.545 0.000 FG
("Forest") S
0.000 0.000 0.000 FG
(, gcamoyear[) S
SL
(yr] \);) S
2 W
LHL
14 W
(}) S
LHL
14 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(gcamoyear[yr]==2095\) {) S
LHL
16 W
(tmp = glmData2095.getProductionInCarbon\( regionName[i], aez, ) S
0.000 0.545 0.000 FG
("Forest") S
0.000 0.000 0.000 FG
(, gcamoyear[) S
SL
(yr] \);) S
2 W
LHL
14 W
(}) S
LHL
14 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(gcamoyear[yr]==2100\) {) S
LHL
16 W
(tmp2090 = glmData2090.getProductionInCarbon\( regionName[i], aez, ) S
0.000 0.545 0.000 FG
("Forest") S
0.000 0.000 0.000 FG
(, 2090 \)) S
SL
(;) S
7 W
LHL
16 W
(tmp2095 = glmData2095.getProductionInCarbon\( regionName[i], aez, ) S
0.000 0.545 0.000 FG
("Forest") S
0.000 0.000 0.000 FG
(, 2095 \)) S
SL
(;) S
7 W
LHL
16 W
(tmp=\(tmp2095-tmp2090\)+tmp2095;) S
LHL
(   ) S
13 W
(mainLog << ) S
0.000 0.545 0.000 FG
("values for 2090 and 2095 are") S
0.000 0.000 0.000 FG
( << tmp2090 <<) S
0.000 0.545 0.000 FG
("/") S
0.000 0.000 0.000 FG
(<< tmp2095 << endl;) S
LHL
14 W
(}) S
LHL
14 W
(gcamo[in] = tmp<0.?0.:tmp;) S
LHL
14 W
(mainLog << ) S
0.000 0.545 0.000 FG
("packing gcamo") S
0.000 0.000 0.000 FG
( << regionName[i] <<) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << aez << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << landType[n] <<) S
0.000 0.545 0.000 FG
(" ) S
SL
(gcamo[") S
0.000 0.000 0.000 FG
( << in << ) S
0.000 0.545 0.000 FG
("]=") S
0.000 0.000 0.000 FG
( << gcamo[in] << endl;) S
LHL
12 W
(}  ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(landtype) S
LHL
/f0 F
0.000 0.000 0.000 FG
10 W
(}  ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(for n) S
LHL
/f0 F
0.000 0.000 0.000 FG
8 W
(}  ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(for aez) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      }  ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(for i) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    }  ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(for yr) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    *yr1=gcamoyear[0];) S
LHL
(    *yr2=gcamoyear[1];) S
PHL
(    ) S
LHL
(    ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(packup gcamoemiss array with just co2 emissions for now will add others later) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
(i) S
(n=-1;) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(numGases) S
0.000 0.000 0.000 FG
( = 1;) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(strin) S
(g) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(gases) S
0.000 0.000 0.000 FG
([] = { ) S
0.000 0.545 0.000 FG
("CO2") S
0.000 0.000 0.000 FG
( };) S
LHL
(    ) S
0.000 0.000 0.804 FG
(/) S
(/    ) S
/f2 F
(const int numGases = 8;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
0.000 0.000 0.804 FG
(//    ) S
/f2 F
(const string gases[] = { "BC", "CH4", "CO", "NH3", "NMVOC", "NOx", "OC", "SO2" };) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
/f1 F
0.804 0.000 0.000 FG
(c) S
(onst) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(numCategories) S
0.000 0.000 0.000 FG
( = 12;) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(strin) S
(g) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(categories) S
0.000 0.000 0.000 FG
([] = { ) S
0.000 0.545 0.000 FG
("AGR") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("AIR") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("AWB") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("DOM") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("ENE") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("IND") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("LCF") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("SAV") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("SHIP") S
0.000 0.000 0.000 FG
(,) S
SL
( ) S
0.000 0.545 0.000 FG
("SLV") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("TRA") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("WST") S
0.000 0.000 0.000 FG
( };) S
PHL
(    ) S
EndPage
EndDSCPage
EndSheet

%%Page: 6 6
/Lines 516 def
/PageCount 8 def
1 BeginSheet
BeginDSCPage
/LineNumber 338 def
/PageNumber 6 def
/HeaderLinesLeft[
 [/h0 (CCSM_GCAM_interface.cpp)]
 [/h1 (~/iESM/models/lnd/clm/src/iac/giac/gcam/cvs/objects/ccsmcpl/source/)]
]def
/HeaderLinesRight[
 [/h0 /pagenumberstring load]
 [/h1 (08/09/2017)]
]def
2 SetHeaderLines
360 BeginPage
/f0 F
false BG
0.000 0.000 0.000 FG
(    ) S
/f3 F
1.000 0.271 0.000 FG
(RCPEmissionsVisito) S
(r) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(emissionsVisitor2090) S
0.000 0.000 0.000 FG
(;) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(RCPEmissionsVisito) S
(r) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(emissionsVisitor2095) S
0.000 0.000 0.000 FG
(;) S
LHL
(    ) S
0.000 0.000 0.804 FG
(/) S
(/    ) S
/f2 F
(const Modeltime* modeltime = scenario->getModeltime\(\);) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
0.000 0.000 0.804 FG
(//    ) S
/f2 F
(const int year = modeltime->getper_to_yr\( aPeriod \);) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
(r) S
(unner->getInternalScenario\(\)->accept\( &emissionsVisitor2090, period2090 \);) S
LHL
(    runner->getInternalScenario\(\)->accept\( &emissionsVisitor2095, period2095 \);) S
LHL
(    ) S
0.000 0.545 0.545 FG
(std) S
0.000 0.000 0.000 FG
(::) S
/f3 F
1.000 0.271 0.000 FG
(vector) S
/f0 F
0.000 0.000 0.000 FG
(<) S
/f3 F
1.000 0.271 0.000 FG
(Region) S
/f0 F
0.000 0.000 0.000 FG
(*) S
(>) S
( ) S
0.000 0.000 0.804 FG
(regions) S
0.000 0.000 0.000 FG
(=runner->getInternalScenario\(\)->getWorld\(\)->getRegions\(\);) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
(\( ) S
/f3 F
1.000 0.271 0.000 FG
(RegionIterato) S
(r) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(region) S
0.000 0.000 0.000 FG
( = regions.begin\(\); region != regions.end\(\); ++region \){) S
LHL
(      ) S
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
(\( ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(catI) S
0.000 0.000 0.000 FG
( = 0; catI < numCategories; ++catI \) {) S
LHL
8 W
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
(\( ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(gasI) S
0.000 0.000 0.000 FG
( = 0; gasI < numGases; ++gasI \) {) S
LHL
10 W
(in++;) S
LHL
10 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(gcamoyear[1]==2100\) {) S
LHL
12 W
(tmp2090 = emissionsVisitor2090.getEmissions\( \(*region\)->getName\(\), categories[ catI ]) S
SL
(, gases[ gasI ], 2090 \);) S
LHL
12 W
(tmp2095 = emissionsVisitor2095.getEmissions\( \(*region\)->getName\(\), categories[ catI ]) S
SL
(, gases[ gasI ], 2095 \);) S
LHL
12 W
(tmp=\(tmp2095-tmp2090\)+tmp2095;) S
LHL
12 W
(gcamoemis[in] = tmp;) S
LHL
12 W
(mainLog << ) S
0.000 0.545 0.000 FG
("values for 2090 and 2095 are") S
0.000 0.000 0.000 FG
( << tmp2090 <<) S
0.000 0.545 0.000 FG
("/") S
0.000 0.000 0.000 FG
(<< tmp2095 << endl;) S
LHL
12 W
(mainLog << ) S
0.000 0.545 0.000 FG
("packing gcamoemis") S
0.000 0.000 0.000 FG
( << \(*region\)->getName\(\) << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << gases[ gasI ] << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
SL
( << categories[ catI ] << gcamoyear[1] <<) S
0.000 0.545 0.000 FG
(" gcamoemis[") S
0.000 0.000 0.000 FG
( << in << ) S
0.000 0.545 0.000 FG
("]=") S
0.000 0.000 0.000 FG
( << gcamoemis[in] << endl;) S
LHL
10 W
(}) S
/f1 F
0.804 0.000 0.000 FG
(else) S
/f0 F
0.000 0.000 0.000 FG
({) S
LHL
12 W
(tmp = emissionsVisitor2095.getEmissions\( \(*region\)->getName\(\), categories[ catI ], ga) S
SL
(ses[ gasI ], gcamoyear[1] \);) S
LHL
10 W
(}) S
LHL
8 W
(}) S
LHL
(      }) S
LHL
(    }) S
PHL
(    ) S
LHL
(  }) S
/f1 F
0.804 0.000 0.000 FG
(else) S
/f0 F
0.000 0.000 0.000 FG
({) S
(   ) S
0.000 0.000 0.804 FG
(/) S
(/) S
/f2 F
(Run GCAM and fill gcamo and gcamoemis) S
PHL
/f0 F
0.000 0.000 0.000 FG
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(c) S
(onst) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(Modeltim) S
(e) S
/f0 F
0.000 0.000 0.000 FG
(* ) S
0.000 0.000 0.804 FG
(modeltime) S
0.000 0.000 0.000 FG
( = runner->getInternalScenario\(\)->getModeltime\(\);) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(finalCalibrationYear) S
0.000 0.000 0.000 FG
(=modeltime->getper_to_yr\(modeltime->getFinalCalibrationPeriod\(\)\);) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(period) S
0.000 0.000 0.000 FG
( = modeltime->getyr_to_per\( curryear \);) S
LHL
(    ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(modelyear) S
0.000 0.000 0.000 FG
(= modeltime->getper_to_yr\(period\);) S
PHL
(    ) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("curryear is ") S
0.000 0.000 0.000 FG
( << curryear << endl;) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("period is ") S
0.000 0.000 0.000 FG
( << period << endl;) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("modelyear is ") S
0.000 0.000 0.000 FG
( << modelyear << endl;) S
LHL
(    mainLog << ) S
0.000 0.545 0.000 FG
("finalCalibrationYear is ") S
0.000 0.000 0.000 FG
( << finalCalibrationYear << endl;) S
PHL
(    ) S
PHL
(    ) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
(\(modeltime->isModelYear\( curryear\)\) {) S
PHL
(      ) S
LHL
(      ) S
/f3 F
1.000 0.271 0.000 FG
(Time) S
(r) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(timer) S
0.000 0.000 0.000 FG
(;) S
PHL
(      ) S
LHL
(      ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(TODO: is this necessary, it will be the same as currYear) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
(m) S
(ainLog << ) S
0.000 0.545 0.000 FG
("Running GCAM for year") S
0.000 0.000 0.000 FG
( << modelyear << endl;) S
LHL
(      mainLog << ) S
0.000 0.545 0.000 FG
("calculating period=") S
0.000 0.000 0.000 FG
( << period << endl;) S
PHL
(      ) S
LHL
(      mainLog.precision\(20\);) S
PHL
(      ) S
LHL
(      ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Initialize the timer.  Create an object of the Timer class.) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
(t) S
(imer.start\(\);) S
PHL
(      ) S
LHL
(      success = runner->runScenarios\( period, ) S
0.000 0.545 0.545 FG
(true) S
0.000 0.000 0.000 FG
(, timer \);) S
PHL
(      ) S
LHL
(      timer.stop\(\);) S
PHL
(      ) S
LHL
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(write restarts if needed.) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
(\(write_rest\) {) S
LHL
8 W
(mainLog << ) S
0.000 0.545 0.000 FG
("write_rest: ") S
0.000 0.000 0.000 FG
( << *write_rest << endl;) S
LHL
8 W
(runner->writeRestart\( period, curryear \);) S
LHL
(      }) S
LHL
(    }) S
PHL
(    ) S
LHL
(    ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(only worry about packing gcamo past final calibration year) S
PHL
/f0 F
0.000 0.000 0.000 FG
(    ) S
LHL
(    ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(curryear>=finalCalibrationYear\) {) S
PHL
(      ) S
LHL
(      ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(calculate bounding years to pass to gcam2glm) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
/f3 F
1.000 0.271 0.000 FG
(i) S
(n) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(bndyr1) S
0.000 0.000 0.000 FG
(,) S
0.000 0.000 0.804 FG
(bndyr2) S
0.000 0.000 0.000 FG
(;) S
EndPage
EndDSCPage
EndSheet

%%Page: 7 7
/Lines 516 def
/PageCount 8 def
1 BeginSheet
BeginDSCPage
/LineNumber 406 def
/PageNumber 7 def
/HeaderLinesLeft[
 [/h0 (CCSM_GCAM_interface.cpp)]
 [/h1 (~/iESM/models/lnd/clm/src/iac/giac/gcam/cvs/objects/ccsmcpl/source/)]
]def
/HeaderLinesRight[
 [/h0 /pagenumberstring load]
 [/h1 (08/09/2017)]
]def
2 SetHeaderLines
432 BeginPage
/f0 F
false BG
0.000 0.000 0.000 FG
(      mainLog << ) S
0.000 0.545 0.000 FG
("sneakermode: ") S
0.000 0.000 0.000 FG
( << *sneakermode << endl;) S
LHL
(      ) S
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(*sneakermode\) {) S
LHL
8 W
(bndyr1 =  period<4?gcamStartYear:modeltime->getper_to_yr\(period-3\);) S
LHL
8 W
(bndyr2 =  modeltime->getper_to_yr\(period\);) S
LHL
(      }) S
/f1 F
0.804 0.000 0.000 FG
(else) S
/f0 F
0.000 0.000 0.000 FG
({) S
LHL
8 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
(\(modeltime->isModelYear\( curryear\)\) {) S
LHL
10 W
(bndyr1 =  period==0?gcamStartYear:modeltime->getper_to_yr\(period-1\);) S
LHL
10 W
(bndyr2 =  modeltime->getper_to_yr\(period\);) S
LHL
8 W
(}) S
/f1 F
0.804 0.000 0.000 FG
(else) S
/f0 F
0.000 0.000 0.000 FG
({) S
LHL
10 W
(bndyr1 =  period==0?gcamStartYear:modeltime->getper_to_yr\(period-2\);) S
LHL
10 W
(bndyr2 =  modeltime->getper_to_yr\(period-1\);) S
LHL
8 W
(}) S
LHL
(      }) S
PHL
(      ) S
LHL
(      ) S
0.000 0.000 0.804 FG
(/) S
(/    ) S
/f2 F
(mainLog << "prev year: " << prevyear << endl;) S
PHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
LHL
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(//     // ****** This is an example of how to query GCAM data for GLM ******) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(//     // A Period value of -1 indicates gather data for all model periods.) S
PHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
LHL
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "calling runner accept with period: " << period << endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(GetGLMData glmData;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(runner->getInternalScenario\(\)->accept\(&glmData, period \);) S
PHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
LHL
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(// Region and land categories are GLM categories, the years are GCAM years) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(// for example 1990 to 2095 in 15 curryear time steps.) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(int aez=7 ;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "Year: " << modelyear << endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "USA Cropland: " << glmData.getLandCover\( "USA", aez, "Cropland", modelyear \)) S
SL
( << endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "USA Forest: " << glmData.getLandCover\( "USA", aez, "Forest", modelyear \) << ) S
SL
(endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "USA ForestHarvested: " << glmData.getLandCover\( "USA", aez, "ForestHarvested) S
SL
(", modelyear \) << endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "USA Grassland: " << glmData.getLandCover\( "USA", aez, "Grassland", modelyear) S
SL
( \) << endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "USA Pasture: " << glmData.getLandCover\( "USA", aez, "Pasture", modelyear \) <) S
SL
(< endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "USA Build-up: " << glmData.getLandCover\( "USA", aez, "Build-up", modelyear \)) S
SL
( << endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "USA Other Land: " << glmData.getLandCover\( "USA", aez, "Other Land", modelye) S
SL
(ar \) << endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "USA Forest production in tC: " << glmData.getProductionInCarbon\( "USA", aez,) S
SL
( "Forest", modelyear \) << endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(pair<double, double> carbonDensity = glmData.getCarbonDensity\( "USA", aez, "Corn", model) S
SL
(year \);) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(// ) S
/f2 F
(mainLog << "USA Corn carbon densities: " << carbonDensity.first <<  ", " << carbonDensit) S
SL
(y.second << endl;) S
PHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
LHL
(      ) S
/f3 F
1.000 0.271 0.000 FG
(d) S
(oubl) S
(e) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(tmp) S
0.000 0.000 0.000 FG
(=0.;) S
LHL
(      ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(in) S
0.000 0.000 0.000 FG
( = -1;) S
LHL
(      ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(glmdataPeriod) S
0.000 0.000 0.000 FG
(;) S
LHL
(      ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(gcamoyear) S
0.000 0.000 0.000 FG
([2];) S
LHL
(      ) S
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(yr) S
0.000 0.000 0.000 FG
( = 0;yr<2;yr++\) {) S
LHL
8 W
/f3 F
1.000 0.271 0.000 FG
(GetGLMDat) S
(a) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(glmData) S
0.000 0.000 0.000 FG
(;) S
LHL
8 W
(gcamoyear[yr] = yr==0?bndyr1:bndyr2;) S
LHL
8 W
(glmdataPeriod = modeltime->getyr_to_per\( gcamoyear[yr] \);) S
LHL
8 W
(runner->getInternalScenario\(\)->accept\(&glmData, glmdataPeriod \);) S
LHL
8 W
(mainLog << ) S
0.000 0.545 0.000 FG
("gcamoyear[") S
0.000 0.000 0.000 FG
( << yr <<) S
0.000 0.545 0.000 FG
("]=") S
0.000 0.000 0.000 FG
( << gcamoyear[yr] << endl;) S
LHL
8 W
(mainLog << ) S
0.000 0.545 0.000 FG
("gcamoyear period") S
0.000 0.000 0.000 FG
( << glmdataPeriod << endl;) S
LHL
8 W
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(i) S
0.000 0.000 0.000 FG
( = 0;i<14;i++\) {) S
LHL
10 W
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(aez) S
0.000 0.000 0.000 FG
( = 1;aez<19;aez++\) {) S
LHL
12 W
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
( \() S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(n) S
0.000 0.000 0.000 FG
( = 0;n<*gcamo_fdim1_nflds;n++\) {) S
LHL
14 W
(in++;) S
LHL
14 W
/f1 F
0.804 0.000 0.000 FG
(if) S
/f0 F
0.000 0.000 0.000 FG
( \(landType[n] != ) S
0.000 0.545 0.000 FG
("ForestHarvested") S
0.000 0.000 0.000 FG
(\) { ) S
LHL
16 W
(tmp =  glmData.getLandCover\( regionName[i], aez, landType[n], gcamoyear[yr] \);) S
2 W
LHL
16 W
(gcamo[in] = tmp<0.?0.:tmp;) S
LHL
16 W
(mainLog << ) S
0.000 0.545 0.000 FG
("packing gcamo") S
0.000 0.000 0.000 FG
( << regionName[i] << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << aez << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << landType[n] <) S
SL
(<) S
0.000 0.545 0.000 FG
(" gcamo[") S
0.000 0.000 0.000 FG
( << in << ) S
0.000 0.545 0.000 FG
("]=") S
0.000 0.000 0.000 FG
( << gcamo[in] << endl;) S
LHL
14 W
(}) S
/f1 F
0.804 0.000 0.000 FG
(else) S
/f0 F
0.000 0.000 0.000 FG
({) S
LHL
16 W
(tmp = glmData.getProductionInCarbon\( regionName[i], aez, ) S
0.000 0.545 0.000 FG
("Forest") S
0.000 0.000 0.000 FG
(, gcamoyear[yr] ) S
SL
(\);) S
6 W
LHL
16 W
(gcamo[in] = tmp<0.?0.:tmp;) S
EndPage
EndDSCPage
EndSheet

%%Page: 8 8
/Lines 516 def
/PageCount 8 def
1 BeginSheet
BeginDSCPage
/LineNumber 466 def
/PageNumber 8 def
/HeaderLinesLeft[
 [/h0 (CCSM_GCAM_interface.cpp)]
 [/h1 (~/iESM/models/lnd/clm/src/iac/giac/gcam/cvs/objects/ccsmcpl/source/)]
]def
/HeaderLinesRight[
 [/h0 /pagenumberstring load]
 [/h1 (08/09/2017)]
]def
2 SetHeaderLines
504 BeginPage
/f0 F
false BG
0.000 0.000 0.000 FG
16 W
(mainLog << ) S
0.000 0.545 0.000 FG
("packing gcamo") S
0.000 0.000 0.000 FG
( << regionName[i] <<) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << aez << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << landType[n] <<) S
0.000 0.545 0.000 FG
SL
(" gcamo[") S
0.000 0.000 0.000 FG
( << in << ) S
0.000 0.545 0.000 FG
("]=") S
0.000 0.000 0.000 FG
( << gcamo[in] << endl;) S
LHL
14 W
(} ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(fi landtype) S
LHL
/f0 F
0.000 0.000 0.000 FG
12 W
(} ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(for fieldnum) S
LHL
/f0 F
0.000 0.000 0.000 FG
10 W
(} ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(for aez) S
LHL
/f0 F
0.000 0.000 0.000 FG
8 W
(} ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(for region) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      } ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(for year 0,1) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      *yr1=gcamoyear[0];) S
LHL
(      *yr2=gcamoyear[1];) S
PHL
LHL
(      ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(packup gcamoemiss array with just co2 emissions for now will add others later) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
(i) S
(n=-1;      ) S
LHL
(      ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(numGases) S
0.000 0.000 0.000 FG
( = 1;) S
LHL
(      ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(strin) S
(g) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(gases) S
0.000 0.000 0.000 FG
([] = { ) S
0.000 0.545 0.000 FG
("CO2") S
0.000 0.000 0.000 FG
( };) S
LHL
(      ) S
0.000 0.000 0.804 FG
(/) S
(/    ) S
/f2 F
(const int numGases = 8;) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(//    ) S
/f2 F
(const string gases[] = { "BC", "CH4", "CO", "NH3", "NMVOC", "NOx", "OC", "SO2" };) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
/f1 F
0.804 0.000 0.000 FG
(c) S
(onst) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(numCategories) S
0.000 0.000 0.000 FG
( = 12;) S
LHL
(      ) S
/f1 F
0.804 0.000 0.000 FG
(const) S
/f0 F
0.000 0.000 0.000 FG
( ) S
/f3 F
1.000 0.271 0.000 FG
(strin) S
(g) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(categories) S
0.000 0.000 0.000 FG
([] = { ) S
0.000 0.545 0.000 FG
("AGR") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("AIR") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("AWB") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("DOM") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("ENE") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("IND") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("LCF") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("SAV") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("SHIP) S
SL
(") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("SLV") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("TRA") S
0.000 0.000 0.000 FG
(, ) S
0.000 0.545 0.000 FG
("WST") S
0.000 0.000 0.000 FG
( };) S
PHL
(      ) S
LHL
(      ) S
/f3 F
1.000 0.271 0.000 FG
(RCPEmissionsVisito) S
(r) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(emissionsVisitor) S
0.000 0.000 0.000 FG
(;) S
LHL
(      ) S
0.000 0.000 0.804 FG
(/) S
(/    ) S
/f2 F
(const Modeltime* modeltime = scenario->getModeltime\(\);) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
0.000 0.000 0.804 FG
(//    ) S
/f2 F
(const int year = modeltime->getper_to_yr\( aPeriod \);) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      ) S
(r) S
(unner->getInternalScenario\(\)->accept\( &emissionsVisitor, period \);) S
LHL
(      ) S
0.000 0.545 0.545 FG
(std) S
0.000 0.000 0.000 FG
(::) S
/f3 F
1.000 0.271 0.000 FG
(vector) S
/f0 F
0.000 0.000 0.000 FG
(<) S
/f3 F
1.000 0.271 0.000 FG
(Region) S
/f0 F
0.000 0.000 0.000 FG
(*) S
(>) S
( ) S
0.000 0.000 0.804 FG
(regions) S
0.000 0.000 0.000 FG
(=runner->getInternalScenario\(\)->getWorld\(\)->getRegions\(\);) S
LHL
(      ) S
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
(\( ) S
/f3 F
1.000 0.271 0.000 FG
(RegionIterato) S
(r) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(region) S
0.000 0.000 0.000 FG
( = regions.begin\(\); region != regions.end\(\); ++region \){) S
LHL
8 W
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
(\( ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(catI) S
0.000 0.000 0.000 FG
( = 0; catI < numCategories; ++catI \) {) S
LHL
10 W
/f1 F
0.804 0.000 0.000 FG
(for) S
/f0 F
0.000 0.000 0.000 FG
(\( ) S
/f3 F
1.000 0.271 0.000 FG
(in) S
(t) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(gasI) S
0.000 0.000 0.000 FG
( = 0; gasI < numGases; ++gasI \) {) S
LHL
12 W
(in++;) S
LHL
12 W
(tmp = emissionsVisitor.getEmissions\( \(*region\)->getName\(\), categories[ catI ], gases[) S
SL
( gasI ], gcamoyear[1] \);) S
LHL
12 W
0.000 0.000 0.804 FG
(/) S
(/) S
10 W
/f2 F
(rcpLog << \( region - regions.begin\(\) + 1 \) << ", " << gases[ gasI ] << ",) S
SL
( " << categories[ catI ] << ", ") S
LHL
/f0 F
0.000 0.000 0.000 FG
12 W
0.000 0.000 0.804 FG
(//) S
17 W
/f2 F
(<< year << ", ") S
LHL
/f0 F
0.000 0.000 0.000 FG
12 W
0.000 0.000 0.804 FG
(//) S
17 W
/f2 F
(<< tmp << endl;) S
LHL
/f0 F
0.000 0.000 0.000 FG
12 W
(g) S
(camoemis[in] = tmp<0.?0.:tmp;) S
LHL
12 W
(mainLog << ) S
0.000 0.545 0.000 FG
("packing gcamoemis") S
0.000 0.000 0.000 FG
( << \(*region\)->getName\(\) << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
( << gases[ gasI ] << ) S
0.000 0.545 0.000 FG
(":") S
0.000 0.000 0.000 FG
SL
( << categories[ catI ] << gcamoyear[1] <<) S
0.000 0.545 0.000 FG
(" gcamoemis[") S
0.000 0.000 0.000 FG
( << in << ) S
0.000 0.545 0.000 FG
("]=") S
0.000 0.000 0.000 FG
( << tmp << endl;) S
LHL
10 W
(} ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(gasI) S
LHL
/f0 F
0.000 0.000 0.000 FG
8 W
(} ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(catI) S
LHL
/f0 F
0.000 0.000 0.000 FG
(      } ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(region) S
LHL
/f0 F
0.000 0.000 0.000 FG
(    } ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(if final calibration year) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  }  ) S
0.000 0.000 0.804 FG
(//) S
/f2 F
(end curryr==2100) S
LHL
/f0 F
0.000 0.000 0.000 FG
(}) S
LHL
/f3 F
1.000 0.271 0.000 FG
(voi) S
(d) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.545 0.545 FG
(CCSM_GCAM_interface) S
0.000 0.000 0.000 FG
(::) S
/f3 F
0.000 0.000 0.545 FG
(finalizeGCAM) S
/f0 F
0.000 0.000 0.000 FG
(\(\)) S
LHL
({) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(Time) S
(r) S
/f0 F
0.000 0.000 0.000 FG
( ) S
0.000 0.000 0.804 FG
(timer) S
0.000 0.000 0.000 FG
(;) S
LHL
(  ) S
0.000 0.000 0.804 FG
(/) S
(/ ) S
/f2 F
(Initialize the timer.  Create an object of the Timer class.) S
LHL
/f0 F
0.000 0.000 0.000 FG
(  ) S
(t) S
(imer.start\(\);) S
LHL
(  ) S
/f3 F
1.000 0.271 0.000 FG
(ILogge) S
(r) S
/f0 F
0.000 0.000 0.000 FG
(& ) S
0.000 0.000 0.804 FG
(mainLog) S
0.000 0.000 0.000 FG
( = ) S
0.000 0.545 0.545 FG
(ILogger) S
0.000 0.000 0.000 FG
(::getLogger\( ) S
0.000 0.545 0.000 FG
("main_log") S
0.000 0.000 0.000 FG
( \);) S
LHL
(  mainLog.setLevel\( ) S
0.000 0.545 0.545 FG
(ILogger) S
0.000 0.000 0.000 FG
(::NOTICE \);) S
LHL
(  mainLog << ) S
0.000 0.545 0.000 FG
("calling finalize") S
0.000 0.000 0.000 FG
( << endl;) S
LHL
(  runner->printOutput\(timer\);) S
LHL
(  timer.stop\(\);) S
LHL
(}) S
PHL
EndPage
EndDSCPage
EndSheet

%%Trailer
%%Pages: 8

EndDoc

%%EOF
